// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.0
// source: protos/errors/errors.proto

package errors

import (
	context "context"
	types "github.com/x/protos/lib/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorCode     int32                  `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorResponse) Reset() {
	*x = ErrorResponse{}
	mi := &file_protos_errors_errors_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorResponse) ProtoMessage() {}

func (x *ErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_errors_errors_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorResponse.ProtoReflect.Descriptor instead.
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return file_protos_errors_errors_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ErrorResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_protos_errors_errors_proto protoreflect.FileDescriptor

const file_protos_errors_errors_proto_rawDesc = "" +
	"\n" +
	"\x1aprotos/errors/errors.proto\x12\x06errors\x1a\x18protos/types/types.proto\"D\n" +
	"\rErrorResponse\x12\x1d\n" +
	"\n" +
	"error_code\x18\x01 \x01(\x05R\terrorCode\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error2C\n" +
	"\x05Error\x12:\n" +
	"\bGetError\x12\x17.errors.NotificationLog\x1a\x15.errors.ErrorResponseB Z\x1egithub.com/x/protos/lib/errorsb\x06proto3"

var (
	file_protos_errors_errors_proto_rawDescOnce sync.Once
	file_protos_errors_errors_proto_rawDescData []byte
)

func file_protos_errors_errors_proto_rawDescGZIP() []byte {
	file_protos_errors_errors_proto_rawDescOnce.Do(func() {
		file_protos_errors_errors_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_protos_errors_errors_proto_rawDesc), len(file_protos_errors_errors_proto_rawDesc)))
	})
	return file_protos_errors_errors_proto_rawDescData
}

var file_protos_errors_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_protos_errors_errors_proto_goTypes = []any{
	(*ErrorResponse)(nil),         // 0: errors.ErrorResponse
	(*types.NotificationLog)(nil), // 1: errors.NotificationLog
}
var file_protos_errors_errors_proto_depIdxs = []int32{
	1, // 0: errors.Error.GetError:input_type -> errors.NotificationLog
	0, // 1: errors.Error.GetError:output_type -> errors.ErrorResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_errors_errors_proto_init() }
func file_protos_errors_errors_proto_init() {
	if File_protos_errors_errors_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_protos_errors_errors_proto_rawDesc), len(file_protos_errors_errors_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_errors_errors_proto_goTypes,
		DependencyIndexes: file_protos_errors_errors_proto_depIdxs,
		MessageInfos:      file_protos_errors_errors_proto_msgTypes,
	}.Build()
	File_protos_errors_errors_proto = out.File
	file_protos_errors_errors_proto_goTypes = nil
	file_protos_errors_errors_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ErrorClient is the client API for Error service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ErrorClient interface {
	GetError(ctx context.Context, in *types.NotificationLog, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type errorClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorClient(cc grpc.ClientConnInterface) ErrorClient {
	return &errorClient{cc}
}

func (c *errorClient) GetError(ctx context.Context, in *types.NotificationLog, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/errors.Error/GetError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorServer is the server API for Error service.
type ErrorServer interface {
	GetError(context.Context, *types.NotificationLog) (*ErrorResponse, error)
}

// UnimplementedErrorServer can be embedded to have forward compatible implementations.
type UnimplementedErrorServer struct {
}

func (*UnimplementedErrorServer) GetError(context.Context, *types.NotificationLog) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetError not implemented")
}

func RegisterErrorServer(s *grpc.Server, srv ErrorServer) {
	s.RegisterService(&_Error_serviceDesc, srv)
}

func _Error_GetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.NotificationLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorServer).GetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errors.Error/GetError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorServer).GetError(ctx, req.(*types.NotificationLog))
	}
	return interceptor(ctx, in, info, handler)
}

var _Error_serviceDesc = grpc.ServiceDesc{
	ServiceName: "errors.Error",
	HandlerType: (*ErrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetError",
			Handler:    _Error_GetError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/errors/errors.proto",
}
